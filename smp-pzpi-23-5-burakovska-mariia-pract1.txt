  МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ







Звіт
з практичної роботи № 1 з дисципліни
Скриптові мови програмування
   





Виконала:                                                                 Перевірив:
ст. гр. ПЗПІ-23-5                        			ст. викладач кафедри ПІ
Бураковська Марія					Сокорчук Ігор Петрович







Харків 2025

1 ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень103.06.20250.1Початкова версія


2 ЗАВДАННЯ
     Написатати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу. Ялинка повинна бути симетричною.
Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких
сусідні рядки відрізняються на два символи та складаються почергово
або з символів «*» або з символів «#». Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу. Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі. Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску. Параметри скрипта повинні мати додатнє значення. Вказані значення повинні округлятися до потрібних у меншу сторону. Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес. 
     У скрипті потрібно обов?язково використати такі конструкції:
	if ... then ... fi  
	while ... do ... done  
	until ... do ... done  
	for ... in .. do ... done  
	for ((...)); do ... done  
     У скрипті також потрібно використати функцію.  
     Файл скрипта повинен бути виконуваним файлом для усіх користуачів системи. Право редагувати файл скрипта повинен мати лише власник скрипта.


3 ОПИС ВИКОНАНОЇ РОБОТИ 
     На першому рядку вказано інтерпретатор Bash (тут і далі Додаток В).
     Функція draw_tier (рядок 2-23). Ця функція відповідає за побудову верхнього ярусу гілок. Вона приймає три аргументи: висоту ярусу, максимальну ширину ярусу та початковий символ (* або #). Спочатку обчислюється глобальний відступ, щоб вирівняти рядки по центру відносно загальної ширини снігу. Потім у циклі малюються рядки, де кількість символів збільшується з кожним рядком. Символи чергуються. Після завершення малювання, зберігається останній символ у змінну last_sym, щоб нижній ярус починався з протилежного символу.
     Функція draw_bottom_tier (рядок 24-48). Будує нижній ярус гілок. Вона починається з визначення, який символ має бути першим, залежно від останнього символу у верхньому ярусі (last_sym). Далі у циклі малюються ширші рядки з поступовим збільшенням ширини, знову ж таки по центру та з чергуванням символів. 
     Далі йде перевірка аргументів (рядок 49-77). Проводиться кілька етапів валідації:
– кількість аргументів: має бути 2;
– аргументи мають бути додатні цілі числа;
– мінімальні допустимі розміри: висота ? 8, ширина снігу ? 7;
– висота повинна дозволяти сформувати гілки та стовбур;
– ширина снігу має бути непарною або перетворюється на найближче непарне число.
     У рядках 78-81 обчислюється, чи можливо побудувати ялинку з заданими параметрами. У випадку порушення будь-якої умови, скрипт виводить повідомлення про помилку у stderr та завершує виконання з відповідним кодом помилки.
     У рядках 82-92 визначаємо, скільки рядків матиме верхній та нижній яруси гілок. Загальна кількість рядків для гілок (branches_height) поділяється на два яруси. Верхній ярус (tier1_height) завжди містить половину або трохи більше рядків. Нижній ярус (tier2_height) отримує решту, залежно від того, чи branches_height дорівнює branch_max. Також додамо механізм очікування, щоб використати конструкцію until(його можна безпечно прибрати зі скрипта). 
     Після проходження всіх перевірок малюється верхній ярус гілок за допомогою draw_tier та нижній ярус гілок за допомогою draw_bottom_tier (рядки 93-94).
Далі малюється стовбур - два рядки з ###, вирівняні по центру(рядки 95-99):
     В кінці малюється сніг - рядок із символів *, шириною на 2 символи більшою за максимальну ширину гілок(рядки 100-106).



4 ВИСНОВКИ
     У ході виконання практичної роботи було створено Bash-скрипт, що виводить симетричну ялинку із гілок, стовбура та шару снігу згідно з параметрами користувача. Під час реалізації були використані всі необхідні конструкції умов, циклів і функцій. Робота дозволила закріпити навички роботи зі скриптами та обробки аргументів командного рядка.


ДОДАТОК А
     https://youtu.be/JqYhA1Cy2Co?feature=shared
     00:00 - Початок відео. Вітання та вступ. 
     00:20 - Функція draw_tier. Малювання першого ярусу ялинки. 
     1:21 - Функція draw_bottiom_tier. Малювання другого ярусу ялинки. 
     2:15 - Перевірка параметрів. Перевіряємо кількість та вміст параметрів, що ввів користувач. 
     3:42 - Обчислення ширини гілок. 
     4:20 - Обчислення висоти кожного ярусу. 
     4:48 - цикл until. 
     5:04 - Вивід результату. Виклик функцій та вівід снігу і стовбуру. 
     5:52 - Демонстрація роботи програми.


ДОДАТОК Б


Рисунок Б.1 – Демонстрація результату роботи програми.

ДОДАТОК В
     1 #!/bin/bash
     2  draw_tier() {
     3      local h=$1
     4      local tier_max=$2
     5      local sym=$3
     6      local global_offset=$(( (snow_param - tier_max) / 2 ))
     7      for ((r=1; r<=h; r++)); do
     8          local nsyms=$(( 2*r - 1 ))
     9          local nspaces=$(( (tier_max - nsyms) / 2 ))
    10          printf "%*s" $(( global_offset + nspaces )) ""
    11          for ((j=1; j<=nsyms; j++)); do
    12              printf "%s" "$sym"
    13          done
    14          printf "\n"
    15          
    16          if [ "$sym" = "*" ]; then
    17              sym="#"
    18          else
    19              sym="*"
    20          fi
    21      done
    22      last_sym=$([ "$sym" = "*" ] && echo "#" || echo "*")
    23  }
    24  draw_bottom_tier() {
    25      local full_rows=$(( (branch_max + 1) / 2 ))
    26      local global_offset=$(( (snow_param - branch_max) / 2 ))
    27      local sym
    28      if [ "$last_sym" = "*" ]; then
    29          sym="#"
    30      else
    31          sym="*"
    32      fi
    33
    34      for ((r=2; r<=full_rows; r++)); do
    35          local count=$(( 2*r - 1 ))
    36          local nspaces=$(( (branch_max - count) / 2 ))
    37          printf "%*s" $(( global_offset + nspaces )) ""
    38          for ((j=1; j<=count; j++)); do
    39              printf "%s" "$sym"
    40          done
    41          printf "\n"
    42          if [ "$sym" = "*" ]; then
    43              sym="#"
    44          else
    45              sym="*"
    46          fi
    47      done
    48  }
    49  if [ "$#" -ne 2 ]; then
    50      echo "ПОМИЛКА! Невірна кількість аргументів." >&2
    51      exit 1
    52  fi
    53  for param in "$@"; do
    54      if ! [[ $param =~ ^[1-9][0-9]*$ ]]; then
    55          echo "ПОМИЛКА! Аргументи мають бути додатні числа." >&2
    56          exit 2
    57      fi
    58  done
    59  total_height=$1
    60  snow_param=$2
    61  if [ "$total_height" -lt 8 ] || [ "$snow_param" -lt 7 ]; then
    62      echo "ПОМИЛКА! Неможливо зобразити ялинку." >&2
    63      exit 5
    64  fi
    65  trunk_height=2
    66  snow_height=1
    67  branches_height=$(( total_height - trunk_height - snow_height ))
    68  if [ "$branches_height" -lt 2 ]; then
    69      echo "ПОМИЛКА! Неможливо зобразити ялинку." >&2
    70      exit 3
    71  fi
    72  tmp=$(( snow_param - 2 ))
    73  if (( tmp % 2 == 0 )); then
    74      branch_max=$(( tmp - 1 ))
    75  else
    76      branch_max=$tmp
    77  fi
    78  if [ "$branches_height" -ne "$branch_max" ] && [ "$branches_height" -ne "$(( branch_max + 1 ))" ]; then
79     echo "ПОМИЛКА! Неможливо зобразити ялинку." >&2
80   exit 4
    81 fi
    82  full_rows=$(( (branch_max + 1) / 2 ))
    83  tier1_height=$full_rows
    84  if [ "$branches_height" -eq "$branch_max" ]; then
    85      tier2_height=$(( full_rows - 1 ))
    86  else
    87      tier2_height=$(( full_rows ))
    88  fi
    90  until [ "$check_ready" -eq 1 ]; do
    91      check_ready=1
    92  done
    93  draw_tier "$tier1_height" "$branch_max" "*"
    94  draw_bottom_tier
    95  trunk_padding=$(( (snow_param - 3) / 2 ))
    96  for ((i=1; i<=2; i++)); do
    97      printf "%*s" "$trunk_padding" ""
    98      printf "###\n"
    99  done
   100  i=1
   101  snow_width=$(( branch_max + 2 ))
   102  while [ "$i" -le "$snow_width" ]; do
   103      printf "*"
   104      ((i++))
   105  done
   106  printf "\n"
2


